<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Account', 'doctrine');

/**
 * BaseAccount
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $email
 * @property string $slug
 * @property string $salt
 * @property string $password
 * @property string $state
 * @property timestamp $last_login
 * @property string $validation_code
 * @property string $culture
 * @property string $currency
 * @property string $type
 * @property boolean $is_designer
 * @property Doctrine_Collection $Frapp
 * @property ProfileCompany $ProfileCompany
 * @property ProfilePerson $ProfilePerson
 * @property ProfileOrganization $ProfileOrganization
 * @property Doctrine_Collection $FrappSkin
 * @property Doctrine_Collection $AccountForgotPassword
 * @property Doctrine_Collection $AccountRememberKey
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method string              getEmail()                 Returns the current record's "email" value
 * @method string              getSlug()                  Returns the current record's "slug" value
 * @method string              getSalt()                  Returns the current record's "salt" value
 * @method string              getPassword()              Returns the current record's "password" value
 * @method string              getState()                 Returns the current record's "state" value
 * @method timestamp           getLastLogin()             Returns the current record's "last_login" value
 * @method string              getValidationCode()        Returns the current record's "validation_code" value
 * @method string              getCulture()               Returns the current record's "culture" value
 * @method string              getCurrency()              Returns the current record's "currency" value
 * @method string              getType()                  Returns the current record's "type" value
 * @method boolean             getIsDesigner()            Returns the current record's "is_designer" value
 * @method Doctrine_Collection getFrapp()                 Returns the current record's "Frapp" collection
 * @method ProfileCompany      getProfileCompany()        Returns the current record's "ProfileCompany" value
 * @method ProfilePerson       getProfilePerson()         Returns the current record's "ProfilePerson" value
 * @method ProfileOrganization getProfileOrganization()   Returns the current record's "ProfileOrganization" value
 * @method Doctrine_Collection getFrappSkin()             Returns the current record's "FrappSkin" collection
 * @method Doctrine_Collection getAccountForgotPassword() Returns the current record's "AccountForgotPassword" collection
 * @method Doctrine_Collection getAccountRememberKey()    Returns the current record's "AccountRememberKey" collection
 * @method Account             setId()                    Sets the current record's "id" value
 * @method Account             setEmail()                 Sets the current record's "email" value
 * @method Account             setSlug()                  Sets the current record's "slug" value
 * @method Account             setSalt()                  Sets the current record's "salt" value
 * @method Account             setPassword()              Sets the current record's "password" value
 * @method Account             setState()                 Sets the current record's "state" value
 * @method Account             setLastLogin()             Sets the current record's "last_login" value
 * @method Account             setValidationCode()        Sets the current record's "validation_code" value
 * @method Account             setCulture()               Sets the current record's "culture" value
 * @method Account             setCurrency()              Sets the current record's "currency" value
 * @method Account             setType()                  Sets the current record's "type" value
 * @method Account             setIsDesigner()            Sets the current record's "is_designer" value
 * @method Account             setFrapp()                 Sets the current record's "Frapp" collection
 * @method Account             setProfileCompany()        Sets the current record's "ProfileCompany" value
 * @method Account             setProfilePerson()         Sets the current record's "ProfilePerson" value
 * @method Account             setProfileOrganization()   Sets the current record's "ProfileOrganization" value
 * @method Account             setFrappSkin()             Sets the current record's "FrappSkin" collection
 * @method Account             setAccountForgotPassword() Sets the current record's "AccountForgotPassword" collection
 * @method Account             setAccountRememberKey()    Sets the current record's "AccountRememberKey" collection
 * 
 * @package    newe
 * @subpackage model
 * @author     Iulian Manea <iulian.manea@impurelabs.com>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseAccount extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('account');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('salt', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('state', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('last_login', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => 25,
             ));
        $this->hasColumn('validation_code', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             ));
        $this->hasColumn('culture', 'string', 3, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 3,
             ));
        $this->hasColumn('currency', 'string', 3, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 3,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_designer', 'boolean', null, array(
             'type' => 'boolean',
             'default' => '0',
             ));

        $this->option('symfony', array(
             'filter' => false,
             'collate' => 'utf8_unicode_ci',
             'charset' => 'utf8',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Frapp', array(
             'local' => 'id',
             'foreign' => 'creator_id'));

        $this->hasOne('ProfileCompany', array(
             'local' => 'id',
             'foreign' => 'account_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasOne('ProfilePerson', array(
             'local' => 'id',
             'foreign' => 'account_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasOne('ProfileOrganization', array(
             'local' => 'id',
             'foreign' => 'account_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasMany('FrappSkin', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('AccountForgotPassword', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('AccountRememberKey', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}